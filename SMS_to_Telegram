from telethon import TelegramClient
import asyncio

## 본인 텔레그램 아이디 절대 누설 금지
api_id = '본인 api id'
api_hash = '본인 api hash'

## 문자 전달 봇 이름
bot_name = '본인 문자전달 봇이름'


## 사건정보
case_no = '9213'
phone_info = {'하석영':'85171584'
              ,'이상욱':'28098582'
              ,'이상욱2':'92578582'
              ,'이성균':'37105653'}

address_info = {'하석영':''
              ,'이상욱':''
              ,'이상욱2':''
              ,'이성균':''}


## 채팅방 목록
## 전체 문자 전달 채팅방
chat_list = [f'{case_no} 전체']


## 개별 문자 전달 채팅방
for key, value in phone_info.items():
    #print(key, value)
    chat_list.append(f'{case_no} {key} {value}')

print(f'메세지를 받을 채팅방 리스트 : {chat_list}')

client = TelegramClient('gameguru', api_id, api_hash)

## Please enter your phone (or bot token):  +821036033132

## 10초에 한번씩 채팅방 조회
interval_sec = 10


async def receive_message(target_chat, message_count):
    
    messages = await client.get_messages(target_chat.user_id, message_count)

    ## 메세지 리스트 초기화
    ## m_list = [message.id, receive_date, name, receive_address, map_address]
    m_list = []

    map_address = ''
    name = ''

    ## 정상 메세지 일때 첫번째 메세지를 읽는다.
    order_no = 0
    if message_count == 2:
        order_no = 1
        
    message = messages[order_no]
    #print(message.id)
    sms = message.message.split('\n')
    len_sms = len(sms)
    #print(sms)
    if(len_sms == 7): ## 정상 메세지 일때
        print("정상메세지 입니다.")
        receive_date = sms[0][7:].strip()
        send_number = sms[1][7:].strip()
        receive_address = sms[-1]
        #print(receive_address)

        ## 기지국 확인 불가
        if(receive_address.strip()[-1] == 'N'):
            print(f"ADDRESS : {receive_address.split(',')[0]}")
            receive_address = receive_address.split(',')[0]
            map_address = receive_address
            print("정상메세지 -> 기지국 확인 불가")
            print(f'RECEIVE_ADDRESS : {receive_address}, MAP_ADDRESS : {map_address}')
        else:
            map_address = receive_address.split(',')[0]
            print("정상메세지 -> 기지국 확인 가능")
            print(f'RECEIVE_ADDRESS : {receive_address}, MAP_ADDRESS : {map_address}')
        
        ## 휴대전화번호 이름 찾기
        for key, value in phone_info.items():
            ## 발신번호에 010대신 020이 붙어서 발신(SKT)
            new_value = f'020{value}'
            #print(send_number)
            if(send_number == new_value):
                name = key
        
        m_list = [message.id,receive_date,name,receive_address,map_address]
        
        print(f'정상메세지 리스트 : {m_list}')

    ## 메세지가 잘렸을때 2개 메세지를 다시 가져온다
    elif(len_sms == 6): 
        print("잘린메세지 입니다. 메세지 2개를 불러옵니다.")
        m_list = await receive_message(target_chat,2)
        print("잘린메세지 때문에 새로 가져온 메세지입니다.")
        print(f'잘려서 새로가져온 리스트 : {m_list}')
        
    else:
        print("메세지를 읽지 못했습니다. 빈 리스트를 반환합니다.")
        m_list = []
        return m_list
        
    return m_list



async def main():
        
    global address_info
    
    """
    for key, value in address_info.items():
        print(f'ADDRESS INFO : {key} : {value}')
    """
    ## 봇대화방 찾아 객체 얻기
    bot_dialog_id = ''
    dialogs = await client.get_dialogs()
    for dialog in dialogs:
        if bot_name == dialog.name:
            bot_dialog_id = dialog.id
    bot_chat = await client.get_input_entity(bot_dialog_id)

    send_text = '처음 위치알림을 시작합니다.'
    for room_name in chat_list:
        print(f'SEND_DIALOG_NAME : {room_name}')
        print(f'SEND TEXT : {send_text}')
        await client.send_message(room_name,send_text)
        await asyncio.sleep(0.2)

    
    ## 처음 수행
    ## 마지막 메세지 하나를 읽어 오기
    print("처음 메세지 읽기")
    o_list = await receive_message(bot_chat,1)
    len_list = len(o_list)
    # m_list = [message.id,receive_date,name,receive_address,map_address]
    send_text = ''
    if(len_list > 0):
        print("메세지가 있습니다. 처음 메세지를 저장합니다.")
        send_text = f'[{o_list[0]}] {o_list[2]} : {o_list[3]} \n'
        if(o_list[4] != '기지국 확인 불가'):
            send_text += f" https://map.naver.com/p/search/{o_list[4]}"
        address_info[o_list[2]] = o_list[4]
        for key, value in address_info.items():
            print(f'FIRST ADDRESS INFO : {key} : {value}')
        
    
    #print(send_text)

    #chat_list = [f'{case_no}_sms_전체']

    ## 개별 문자 전달 채팅방
    send_dialog_name = f'{case_no} {o_list[2]} {phone_info[o_list[2]]}'
    print(f'SEND_DIALOG_NAME : {send_dialog_name}')
    print(f'SEND TEXT : {send_text}')
    
    ## 전체 채팅방 메세지 보내기
    await client.send_message(chat_list[0], send_text)
    ## 해당 인물 채팅방 메세지 보내기
    await client.send_message(send_dialog_name, send_text)
    print("========================================================================")
    await asyncio.sleep(interval_sec)

    o_address = ''
    #for i in range(80):
    while(1):
        send_text = ''
        n_list = []
        print("메세지를 읽습니다.")
        n_list = await receive_message(bot_chat,1)
        len_list = len(n_list)
        n_address = ''

        ## 자료가 있고 변경 사항이 있을 경우
        if(len_list > 0) :
            print("메세지 변경 여부를 체크합니다.")
            if(o_list != n_list):
                print("메세지가 변경되었습니다. 주소 변경 여부를 체크합니다.")
                # m_list = [message.id,receive_date,name,receive_address,map_address]
                o_address = address_info[n_list[2]]
                n_address = n_list[4]
                print(f'기존주소 : {o_address}, 새주소 : {n_address}')
                if(o_address != n_address):
                    send_text = f'[주소변경] {send_text}'
                    address_info[n_list[2]] = n_address
                    print("주소가 변경되어 주소 정보를 수정합니다.")
                    for key, value in address_info.items():
                        print(f'ADDRESS INFO : {key} : {value}')
                else:
                    print("주소가 변경되지 않았습니다.")
                    send_text = f'[주소변경 없음] {send_text}'
                """
                for key, value in address_info.items():
                    print(f'ADDRESS : {key} : {value}')
                """
                send_text += f'[{n_list[0]}] {n_list[2]} : {n_list[3]} \n'

                
                ## 개별 문자 전달 채팅방
                send_dialog_name = f'{case_no} {n_list[2]} {phone_info[n_list[2]]}'

                if send_text.startswith('[주소변경]'):
                    ## 기지국 확인불가 제외하고 맵링크 붙이기
                    if(n_list[4] != '기지국 확인 불가'):
                        send_text += f" https://map.naver.com/p/search/{n_list[4]}"
                
                    print("변경된 주소를 채팅방으로 전송합니다.")
                    print(f'SEND_DIALOG_NAME : {send_dialog_name}')
                    print(f'SEND TEXT : {send_text}')
                    await client.send_message(chat_list[0], send_text)
                    await client.send_message(send_dialog_name, send_text)
                o_list = n_list
                
            else:
                print("메세지가 변경되지 않았습니다.")
        else:
            print("메세지가 없습니다. : 빈리스트")
        
        
        print("========================================================================")
        await asyncio.sleep(interval_sec)
        

async with client:
    client.loop.run_until_complete(await main())


